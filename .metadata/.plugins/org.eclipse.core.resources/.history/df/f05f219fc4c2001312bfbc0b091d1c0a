package com.gdsoftworks.lillycam;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;

import com.gdsoftworks.app.SyncPool;
import com.gdsoftworks.util.Arrays;

import android.os.Bundle;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.hardware.Camera;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.FrameLayout;

public class MainActivity extends Activity {
	WakeLock wakeLock;
	private Camera mCamera;
	private CameraPreview mPreview;
	public int width, height;
	volatile DatagramSocket mobileSocket;
	volatile InetAddress desktopAddress;
	SyncPool<byte[]> bytePool;
	SyncPool<int[]> intPool;
	private volatile int fps = 15;
	volatile FrameStream frameStream;
	private ConcurrentLinkedQueue<byte[]> frameQueue = new ConcurrentLinkedQueue<byte[]>();
	@SuppressWarnings("deprecation")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
		PowerManager powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);
		wakeLock = powerManager.newWakeLock(PowerManager.FULL_WAKE_LOCK, "LillyCam");
		setContentView(R.layout.activity_main);
		mCamera = getCameraInstance();
		List<Integer> formats = mCamera.getParameters().getSupportedPreviewFormats();
		Log.d("lillycam", "Supported preview formats: ");
		for (Integer format: formats) Log.d("lillycam", ""+format);
		Camera.Size size = mCamera.getParameters().getPreviewSize();
		width = size.width; height = size.height;
		bytePool = new SyncPool<byte[]>(new SyncPool.InstanceFactory<byte[]>(){
			public byte[] newInstance() {return new byte[width*height+width*height/2];}
			}, fps);
		intPool = new SyncPool<int[]>(new SyncPool.InstanceFactory<int[]>(){
			public int[] newInstance() {return new int[width*height];}
		}, fps);
		mPreview = new CameraPreview(this, mCamera);
		FrameLayout preview = (FrameLayout) findViewById(R.id.camera_preview);
		preview.addView(mPreview);
		Button uploadButton = (Button) findViewById(R.id.upload);
		frameStream = new FrameStream(this, width, height);
		frameStream.start();
		uploadButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				mCamera.setPreviewCallback(new Camera.PreviewCallback(){
					long startTime = System.nanoTime();
					double fps = MainActivity.this.getFPS();
					public void onPreviewFrame(byte[] data, Camera camera) {
						double deltaTime = System.nanoTime()-startTime;
						if (deltaTime/1000000000>1/fps) {
							if (data!=null) {
								byte[] bytes = bytePool.newObject();
								Arrays.copyTo(bytes, data);
								frameQueue.add(bytes);
							}
							startTime = System.nanoTime();
						}
					}
				});
			}
		});
		try {
			mobileSocket = new DatagramSocket();
			desktopAddress = InetAddress.getByName("71.191.131.57");
		} catch (UnknownHostException e) {
			Log.e("lillycam", "unknown host: "+e.getMessage());
		} catch (Exception e) {
			Log.e("lillycam", "exception: "+e.getMessage());
		}
	}
	public static Camera getCameraInstance() {
		try {return Camera.open();} catch (Exception e) {return null;}
	}
	public int getFPS() {return fps;}
	public byte[] getFrame() {return frameQueue.poll();}
	public void onPause() {
		super.onPause();
		wakeLock.release();
		frameStream.interrupt();
		releaseCamera();
	}
	public void onResume() {
		super.onResume(); wakeLock.acquire(); 
		frameStream = new FrameStream(this, width, height);
	}
	private void releaseCamera() {
		if (mCamera!=null) {
			mCamera.stopPreview(); mCamera.release(); mCamera=null;
		}
	}
}
class FrameStream extends Thread {
	MainActivity networker;
	byte[] jpegBytes;
	int width, height;
	public static int PORT = 9876;
	public static int PAYLOAD_SIZE = 512;
	long startTime = System.nanoTime();
	public FrameStream(MainActivity activity, int width, int height) {
		networker = activity;
		this.width=width; this.height=height;
	}
	public void queueFrame(byte[] frame) {
		byte[] bytes = networker.bytePool.newObject();
		Arrays.copyTo(bytes, frame);
		frameQueue.add(bytes);
		Log.d("lillycam", "frameQueue size: "+frameQueue.size());
	}
	private ConcurrentLinkedQueue<byte[]> frameQueue = new ConcurrentLinkedQueue<byte[]>();
	public void run() {
		Log.d("lillycam", "frameStream started");
		boolean terminated = false;
		while (!terminated) {
			if (Thread.interrupted()) {terminated=true; break;}
			double deltaTime = System.nanoTime()-startTime;
			if (deltaTime/1000000000>1) {
				Log.d("lillycam", "frame stream running");
				startTime = System.nanoTime();
			}
			try {
				byte[] rawBytes = networker.getFrame();
				//byte[] rawBytes = frameQueue.poll();
				if (rawBytes==null) continue; else Log.d("lillycam", "streaming frame");
				int[] rgbPixels = networker.intPool.newObject();
				decodeYUV420SP(rgbPixels, rawBytes, width, height);
				Bitmap bm = Bitmap.createBitmap(rgbPixels, width, height, Bitmap.Config.RGB_565);
				if (bm==null) {Log.d("lillycam", "Couldn't decode frame jpeg"); return;}
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				bm.compress(CompressFormat.JPEG, 30, baos);
				baos.flush();
				jpegBytes = baos.toByteArray();
				networker.bytePool.free(rawBytes);
				networker.intPool.free(rgbPixels);
				baos = new ByteArrayOutputStream();
				int jpegSize=jpegBytes.length; int offset=0;
				byte[] startBytes = "start frame".getBytes();
				sendPacket(startBytes, startBytes.length);
				for (@SuppressWarnings("unused")
				int counter=0; offset<jpegSize-PAYLOAD_SIZE; counter++, offset+=PAYLOAD_SIZE) {
					//if (counter%200==0) Log.d("lillycam", "sent 100kb");
					baos.reset();
					baos.write(jpegBytes, offset, PAYLOAD_SIZE);
					baos.flush();
					sendPacket(baos.toByteArray(), PAYLOAD_SIZE);
				}
				int lastSize = jpegSize-offset;
				//Log.d("lillycam", "leftover bytes: "+lastSize);
				if (lastSize>0) {
					baos.reset();
					baos.write(jpegBytes, offset, lastSize);
					baos.flush();
					sendPacket(baos.toByteArray(), lastSize);
				}
				byte[] endBytes = "end frame".getBytes();
				sendPacket(endBytes, endBytes.length);
				//Log.d("lillycam", "sent "+jpegSize+"-byte frame");
			} catch (IOException e) {Log.e("lillycam", e.getMessage());}
		}
		Log.d("lillycam", "frameStream terminated");
	}
	static void decodeYUV420SP(int[] rgb, byte[] yuv420sp, int width, int height) {

		   final int frameSize = width * height;

		   for (int j = 0, yp = 0; j < height; j++) {
		     int uvp = frameSize + (j >> 1) * width, u = 0, v = 0;
		     for (int i = 0; i < width; i++, yp++) {
		       int y = (0xff & ((int) yuv420sp[yp])) - 16;
		       if (y < 0)
		         y = 0;
		       if ((i & 1) == 0) {
		         v = (0xff & yuv420sp[uvp++]) - 128;
		         u = (0xff & yuv420sp[uvp++]) - 128;
		       }

		       int y1192 = 1192 * y;
		       int r = (y1192 + 1634 * v);
		       int g = (y1192 - 833 * v - 400 * u);
		       int b = (y1192 + 2066 * u);

		       if (r < 0)
		         r = 0;
		       else if (r > 262143)
		         r = 262143;
		       if (g < 0)
		         g = 0;
		       else if (g > 262143)
		         g = 262143;
		       if (b < 0)
		         b = 0;
		       else if (b > 262143)
		         b = 262143;

		       rgb[yp] = 0xff000000 | ((r << 6) & 0xff0000) | ((g >> 2) & 0xff00) | ((b >> 10) & 0xff);
		     }
		   }
		 }    
	public void sendPacket(byte[] data, int length) throws IOException {
		DatagramPacket sendPacket = new DatagramPacket(data, length,
				networker.desktopAddress, PORT);
		networker.mobileSocket.send(sendPacket);
	}
}
